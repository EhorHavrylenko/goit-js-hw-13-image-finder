{"version":3,"sources":["webpack:///./js/apiService.js","webpack:///./js/refs.js","webpack:///./js/markUpImages.js","webpack:///./index.js"],"names":["searchQuery","page","fetchImages","fetch","this","then","response","json","hits","catch","error","console","log","resetPage","value","refs","searchRef","document","querySelector","loadMoreBtn","galleryContainer","updateImagesMarkup","insertAdjacentHTML","map","el","webformatURL","likes","views","comments","downloads","join","debounce","require","addEventListener","event","preventDefault","apiService","query","target","innerHTML","window","scrollTo","top","photocard","offsetHeight"],"mappings":"yPAee,OACXA,YAAa,GACbC,KAAM,EACNC,cAEG,OAAOC,MAAO,sEAAYC,KAAKJ,oBAAoBI,KAAKH,2DACrDI,KAAKC,GAAYA,EAASC,QAC1BF,KAAK,EAAEG,WACNJ,KAAKH,MAAO,EACLO,IACRC,MAAMC,GAASC,QAAQC,IAAIF,KAGjCG,YACIT,KAAKH,KAAM,GAGf,UAAUa,GACNV,KAAKJ,YAAcc,ICzBZC,MANF,CACTC,UAAWC,SAASC,cAAc,eAClCC,YAAaF,SAASC,cAAc,QACpCE,iBAAkBH,SAASC,cAAc,aCuB9BG,MA1Bf,SAA4Bb,GACzBO,EAAKK,iBAAiBE,mBAAmB,YAAad,EAAKe,IAAIC,GAAO,+CAE1DA,EAAGC,iIAKXD,EAAGE,kGAIHF,EAAGG,+FAIHH,EAAGI,yGAIHJ,EAAGK,uCAGDC,KAAK,OCvBVC,EAAWC,EAAQ,QAIvBjB,EAAKC,UAAUiB,iBAAiB,QAASF,GAAS,SAAUG,GACxDA,EAAMC,iBAENC,EAAWC,MAAQH,EAAMI,OAAOxB,MAEhCC,EAAKK,iBAAiBmB,UAAY,GAElCH,EAAWvB,YAEXuB,EAAWlC,cAAcG,KAAKG,IAC1Ba,EAAmBb,OAExB,MAEHO,EAAKI,YAAYc,iBAAiB,QAAS,KAEvCG,EAAWlC,cAAcG,KAAKG,IAC1Ba,EAAmBb,KAGvBgC,OAAOC,SAAS,CACZC,IAAKC,UAAUC,mB","file":"main.614c16053dba8820a4d4.js","sourcesContent":["import { defaults } from \"autoprefixer\";\n\nconst baseURL = `https://pixabay.com/api/?image_type=photo&orientation=horizontal&q=`;\nconst apiKey = '19920161-2470b7440ca60025ed5778af0';\n\n// const imageSearch = (searchQuery, page = 1) => {\n\n//   return fetch(`${baseURL}${searchQuery}&page=${page}&per_page=12&key=${apiKey}`)\n//       .then(response => response.json())\n//       .then(({hits})=> hits) // деструктурируем нужные нам объекты картинок\n//       .catch(error => console.log(error))\n// }\n\n// export default imageSearch;\n\nexport default {\n    searchQuery: '',\n    page: 1,\n    fetchImages(){\n\n       return fetch(`${baseURL}${this.searchQuery}&page=${this.page}&per_page=12&key=${apiKey}`)\n         .then(response => response.json())\n         .then(({hits})=> { // деструктурируем нужные нам объекты картинок\n           this.page +=1; // после того как успешно прошел htttp запрос, увеличиваем page на +1, чтобы показывались новые страницы результата запроса, иначе будет показывать лишь первая страница (первых 12 фотографий)\n           return hits }) // и возращаем результат во внешний код \n         .catch(error => console.log(error))\n   },\n\n    resetPage(){\n        this.page =1;\n    },\n\n    set query(value){ // обновляем параметр запроса за счет сетера свойства объекта\n        this.searchQuery = value;\n    }\n}\n\n\n\n\n","import { defaults } from \"autoprefixer\"\n\nconst refs = {\n    searchRef: document.querySelector('.input-form'),\n    loadMoreBtn: document.querySelector('.btn'),\n    galleryContainer: document.querySelector('.gallery'),\n}\n\nexport default refs;\n\n","import refs from './refs';\n\nfunction updateImagesMarkup(hits){\n   refs.galleryContainer.insertAdjacentHTML('beforeEnd', hits.map(el => `\n   <div class=\"photo-card\">\n   <img src=\"${el.webformatURL}\" alt=\"\" />\n\n <div class=\"stats\">\n   <p class=\"stats-item\">\n     <i class=\"material-icons\">thumb_up</i>\n     ${el.likes}\n   </p>\n   <p class=\"stats-item\">\n     <i class=\"material-icons\">visibility</i>\n     ${el.views}\n   </p>\n   <p class=\"stats-item\">\n     <i class=\"material-icons\">comment</i>\n     ${el.comments}\n   </p>\n   <p class=\"stats-item\">\n     <i class=\"material-icons\">cloud_download</i>\n     ${el.downloads}\n   </p>\n </div>\n</div>`).join(' '))\n}\n\nexport default updateImagesMarkup;\n","import './styles.css';\nimport apiService from './js/apiService';\nvar debounce = require('lodash.debounce');\nimport refs from './js/refs';\nimport updateImagesMarkup from './js/markUpImages';\n\nrefs.searchRef.addEventListener('input', debounce(function (event) {\n    event.preventDefault();\n\n    apiService.query = event.target.value; // переменая - что ищет юзер\n    \n    refs.galleryContainer.innerHTML = ''; // при новом запросе поиска очищаем html контейнер для фотографий\n\n    apiService.resetPage(); // при каждом новом запросе показываем результат поиска с 1-ой страницы\n\n    apiService.fetchImages().then(hits => { // фу запроса на сервер, передаем ей что вводит в поиск юзер\n        updateImagesMarkup(hits);\n    }) \n}, 500));\n\nrefs.loadMoreBtn.addEventListener('click', () => {\n    \n    apiService.fetchImages().then(hits => {\n        updateImagesMarkup(hits);\n    });\n\n    window.scrollTo({\n        top: photocard.offsetHeight\n        });\n   \n    \n})\n\n// function scroll(){\n//     window.scrollTo({\n//         top: document.documentElement.offsetHeight\n//         });\n//  }\n\n\n\n\n\n"],"sourceRoot":""}